version: '3.4'

services:
  zoo:
    image: zookeeper:3.4.9
    hostname: zoo
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - ./storage/kafka/zk-single-kafka-multiple/zoo/data:/data
      - ./storage/kafka/zk-single-kafka-multiple/zoo/datalog:/datalog
  kafka:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka
    container_name: kafkaDoan
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - ./storage/kafka:/var/lib/kafka/data
    depends_on:
      - zoo
  manager:
    image: sheepkiller/kafka-manager
    container_name: managerKafka
    ports:
      - 9000:9000
    environment:
      - ZK_HOSTS=zoo:2181
    depends_on:
      - zoo
  seq:
    image: datalust/seq:latest
    container_name: seqLogs
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - ./storage/seq:/seq
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest 
    container_name: sqlServer
    environment:
            SA_PASSWORD: "Aa!0977751021"
            ACCEPT_EULA: "Y"
    ports:
      - "5433:1433"
    volumes:
      - ./storage/sqlserver:/var/opt/mssql/data

  redis:
    image: redis:alpine
    container_name: redisCache
    ports:
      - "6379:6379"
    volumes:
      - ./storage/redis:/data/db

  warehouse-api:
    image: ${REGISTRY:-doantotnghiep}/warehouse.api:${PLATFORM:-linux}-${TAG:-latest}
    container_name: wh-api
    build:
      context: .
      dockerfile: src/Services/WareHouse/WareHouse.API/Dockerfile
    depends_on:
      - redis
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:5005
      #- ConnectionString=${WarehouseManagementContext:-Server=sqlserver;Initial Catalog=WarehouseManagement;Persist Security Info=True;User ID=sa;Password=Aa!0977751021;MultipleActiveResultSets = true}
      #- PATH_BASE=/warehouse-api
      #- GRPC_PORT=81
      #- PORT=80
    ports:
      - "5005:5005"
      - "5006:5006"

  master-api:
    image: ${REGISTRY:-doantotnghiep}/master:${PLATFORM:-linux}-${TAG:-latest}
    container_name: mt-api
    build:
      context: .
      dockerfile: src/Services/Master/Master/Dockerfile
    depends_on:
      - redis
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:5001
      #- ConnectionString=${MasterdataContext:-Server=sqlserver;Initial Catalog=MasterData;Persist Security Info=True;User ID=sa;Password=Aa!0977751021;MultipleActiveResultSets = true}
      #- PATH_BASE=/warehouse-api
      #- Redis=${ConnectionString:-redis}
      - GRPC_PORT=81
      - PORT=80
    ports:
      - "5001:5001"
      - "5000:5000"
   
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    environment:
        POSTGRES_USER: kong
        POSTGRES_DB: kong
        POSTGRES_PASSWORD: kong
    ports:
        - "5432:5432"
    volumes:
        - ./storage/kong-database:/var/lib/postgresql/data
    networks:
        - kong-net 
    
  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    restart: on-failure
    depends_on:
        - kong-database
    links:
        - kong-database:kong-database
    environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: kong-database
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: kong
        KONG_CASSANDRA_CONTACT_POINTS: kong-database
    entrypoint: sh -c "sleep 100 && kong migrations bootstrap --vv"
    networks:
        - kong-net
            
  kong:
    image: kong:latest
    container_name: kongapiGateway
    restart: on-failure
    links:
        - kong-database:kong-database
    networks:
        - kong-net
    environment:
        KONG_DATABASE: postgres
        KONG_PG_HOST: kong-database
        KONG_PG_USER: kong
        KONG_PG_PASSWORD: kong
        KONG_CASSANDRA_CONTACT_POINTS: kong-database
        KONG_PROXY_ACCESS_LOG: /dev/stdout
        KONG_ADMIN_ACCESS_LOG: /dev/stdout
        KONG_PROXY_ERROR_LOG: /dev/stderr
        KONG_ADMIN_ERROR_LOG: /dev/stderr
        KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
        - "8000:8000"
        - "8443:8443"
        - "8001:8001"
        - "8444:8444"
    
  konga-prepare:
      image: pantsel/konga
      container_name: konga-prepare
      command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga"
      networks:
          - kong-net
      restart: on-failure
      links:
          - kong-database:kong-database
      depends_on:
          - kong-database
  
  konga:
      image: pantsel/konga
      container_name: kongaManager
      restart: on-failure
      links:
          - kong-database:kong-database
      depends_on:
          - kong-database
      networks:
          - kong-net
      environment:
          DB_ADAPTER: postgres
          DB_HOST: kong-database
          DB_PORT: 5432
          DB_USER: kong
          DB_PASSWORD: kong
          DB_DATABASE: konga
          KONGA_HOOK_TIMEOUT: 120000
          NODE_ENV: production  
      ports:
          - "1337:1337"
      volumes:
          - ./storage/konga:/konga

networks:
    kong-net:
        name: kong-net
        driver: bridge
        

